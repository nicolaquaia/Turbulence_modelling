/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2312                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1;

// Geometric parameters
rInner  0.5;
rOuter  1;
xmax    2.5;
ymax    2.5;
extensionLength  12.5;

zmin   -0.5;  // Back/front locations
zmax    0.5;

// Divisions: Radial, quarter circumference, outer region and z-directions.
nRadial  	44;
nQuarter 	14;
nxOuter  	20;
nxOuter2 	30;
nyOuter  	28;
nxExtension  	150;
nxBlock3  	40;
nz        	8;

// ----------------

// Derived quantities
rInner45    ${{ $rInner * sqrt(0.5) }};
rOuter45    ${{ $rOuter * sqrt(0.5) }};

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points
        ({
            /* 0*/ { $rInner, 0, $zmin },
            /* 1*/ { $rOuter, 0, $zmin },
            /* 2*/ { $xmax, 0, $zmin },
            /* 3*/ { $xmax, $rOuter45, $zmin },
            /* 4*/ { $rOuter45, $rOuter45, $zmin },
            /* 5*/ { $rInner45, $rInner45, $zmin },
            /* 6*/ { $xmax, $ymax, $zmin },
            /* 7*/ { $rOuter45, $ymax, $zmin },
            /* 8*/ { 0, $ymax, $zmin },
            /* 9*/ { 0, $rOuter, $zmin },
            /*10*/ { 0, $rInner, $zmin },
            /*11*/ { -$rInner, 0, $zmin },
            /*12*/ { -$rOuter, 0, $zmin },
            /*13*/ { -$xmax, 0, $zmin },
            /*14*/ { -$xmax, $rOuter45, $zmin },
            /*15*/ { -$rOuter45, $rOuter45, $zmin },
            /*16*/ { -$rInner45, $rInner45, $zmin },
            /*17*/ { -$xmax, $ymax, $zmin },
            /*18*/ { -$rOuter45, $ymax, $zmin },
            
            // added vertices
            /*19*/ { $xmax + $extensionLength, 0, $zmin },
            /*20*/ { $xmax + $extensionLength, $rOuter45, $zmin },
            /*21*/ { $xmax + $extensionLength, $ymax, $zmin },
            
            // add the mirrored vertices
            /*22*/ { $xmax + $extensionLength, -$rOuter45, $zmin },
            /*23*/ { $xmax + $extensionLength, -$ymax, $zmin },
            /*24*/ { $xmax, -$rOuter45, $zmin },
            /*25*/ { $xmax, -$ymax, $zmin },
            /*26*/ { $rOuter45, -$rOuter45, $zmin },
            /*27*/ { $rOuter45, -$ymax, $zmin },
            /*28*/ { $rInner45, -$rInner45, $zmin },
            /*29*/ { 0, -$rInner, $zmin },
            /*30*/ { 0, -$rOuter, $zmin },
            /*31*/ { 0, -$ymax, $zmin },
            /*32*/ { -$rInner45, -$rInner45, $zmin },
            /*33*/ { -$rOuter45, -$rOuter45, $zmin },
            /*34*/ { -$rOuter45, -$ymax, $zmin },
            /*35*/ { -$xmax, -$rOuter45, $zmin },
            /*36*/ { -$xmax, -$ymax, $zmin }
            
        });

        // Duplicate z points for zmax
        const label sz = points.size();
        points.resize(2*sz);
        for (label i = 0; i < sz; ++i)
        {
            const point& pt = points[i];
            points[i + sz] = point(pt.x(), pt.y(), $zmax);
        }

        os  << points;
    #};
};

// Can remove unneeded variables
#remove ( "r(Inner|Outer).*"  "[xy](min|max)" )

blocks
(
	hex (5 4 9 10 42 41 46 47)    ($nRadial  $nQuarter $nz) grading (12.5 1 1)   // 0
	hex (0 1 4 5 37 38 41 42)     ($nRadial  $nQuarter $nz) grading (12.5 1 1)   // 1
	hex (1 2 3 4 38 39 40 41)     ($nxOuter2  $nQuarter $nz) grading (1 1 1)  // 2
	hex (4 3 6 7 41 40 43 44)     ($nxOuter2  $nyOuter  $nz) grading (1 2 1)  // 3
	hex (9 4 7 8 46 41 44 45)     ($nQuarter $nyOuter  $nz) grading (1 2 1)   // 4
	hex (15 16 10 9 52 53 47 46)  ($nRadial  $nQuarter $nz) grading (0.08 1 1)   // 5
	hex (12 11 16 15 49 48 53 52) ($nRadial  $nQuarter $nz) grading (0.08 1 1)   // 6
	hex (13 12 15 14 50 49 52 51) ($nxOuter  $nQuarter $nz) grading (1 1 1)   // 7
	hex (14 15 18 17 51 52 55 54) ($nxOuter  $nyOuter  $nz) grading (1 2 1)   // 8
	hex (15 9 8 18 52 46 45 55)   ($nQuarter $nyOuter  $nz) grading (1 2 1)   // 9
	hex (2 19 20 3 39 56 57 40)   ($nxExtension $nQuarter  $nz) grading (2 1 1)   // 10
	hex (3 20 21 6 40 57 58 43)   ($nxExtension $nyOuter  $nz) grading (2 2 1)   // 11

	// added mirrored blocks 
	hex (26 28 29 30 63 65 66 67)   ($nRadial  $nQuarter $nz) grading (0.08 1 1)     // 12
	hex ( 1  0 28 26 38 37 65 63)   ($nRadial  $nQuarter $nz) grading (0.08 1 1)     // 13
	hex (26 24 2 1 63 61 39 38)     ($nxOuter2  $nQuarter $nz) grading (1 1 1)    // 14
	hex (27 25 24 26 64 62 61 63)   ($nxOuter2  $nyOuter  $nz) grading (1 0.5 1)    // 15
	hex (31 27 26 30 68 64 63 67)   ($nQuarter $nyOuter  $nz) grading (1 0.5 1)     // 16
	hex (30 29 32 33 67 66 69 70)   ($nRadial  $nQuarter $nz) grading (0.08 1 1)     // 17
	hex (33 32 11 12 70 69 48 49)   ($nRadial  $nQuarter $nz) grading (0.08 1 1)     // 18
	hex (35 33 12 13 72 70 49 50)   ($nxOuter  $nQuarter $nz) grading (1 1 1)     // 19
	hex (36 34 33 35 73 71 70 72)   ($nxOuter  $nyOuter  $nz) grading (1 0.5 1)     // 20
	hex (34 31 30 33 71 68 67 70)   ($nQuarter $nyOuter  $nz) grading (1 0.5 1)     // 21
	hex (24 22 19  2 61 59 56 39)   ($nxExtension $nQuarter  $nz) grading (2 1 1) // 22
	hex (25 23 22 24 62 60 59 61)   ($nxExtension $nyOuter  $nz) grading (2 0.5 1)  // 23

);

edges
(
    // Right-top cylinder
    arc  0  5 origin (0 0 $zmin)
    arc  5 10 origin (0 0 $zmin)
    arc  1  4 origin (0 0 $zmin)
    arc  4  9 origin (0 0 $zmin)
    arc 37 42 origin (0 0 $zmax)
    arc 42 47 origin (0 0 $zmax)
    arc 38 41 origin (0 0 $zmax)
    arc 41 46 origin (0 0 $zmax)
    // Left-top cylinder
    arc 11 16 origin (0 0 $zmin)
    arc 16 10 origin (0 0 $zmin)
    arc 12 15 origin (0 0 $zmin)
    arc 15  9 origin (0 0 $zmin)
    arc 48 53 origin (0 0 $zmax)
    arc 53 47 origin (0 0 $zmax)
    arc 49 52 origin (0 0 $zmax)
    arc 52 46 origin (0 0 $zmax)
    
    // Right-bottom cylinder
    arc 29 28 origin (0 0 $zmin)
    arc 28  0 origin (0 0 $zmin)
    arc 30 26 origin (0 0 $zmin)
    arc 26  1 origin (0 0 $zmin)
    arc 66 65 origin (0 0 $zmax)
    arc 65 37 origin (0 0 $zmax)
    arc 67 63 origin (0 0 $zmax)
    arc 63 38 origin (0 0 $zmax)
    // Left-bottom cylinder
    arc 29 32 origin (0 0 $zmin)
    arc 32 11 origin (0 0 $zmin)
    arc 30 33 origin (0 0 $zmin)
    arc 33 12 origin (0 0 $zmin)
    arc 66 69 origin (0 0 $zmax)
    arc 69 48 origin (0 0 $zmax)
    arc 67 70 origin (0 0 $zmax)
    arc 70 49 origin (0 0 $zmax)
);

boundary
(
    down
    {
        type symmetry;
        faces
        (
            (36 34 71 73)
            (34 31 68 71)
            (31 27 64 68)
            (27 25 62 64)
            (25 23 60 62)
            
        );
    }
    right
    {
        type patch;
        faces
        (
            (23 22 59 60)
            (22 19 56 59)
            (19 20 57 56)
            (20 21 58 57)
        );
    }
    up
    {
        type symmetry;
        faces
        (
            (7 8 45 44)
            (6 7 44 43)
            (8 18 55 45)
            (18 17 54 55)
            (21 6 43 58)
        );
    }
    left
    {
        type patch;
        faces
        (
            (14 13 50 51)
            (17 14 51 54)
            (13 35 72 50)
            (35 36 73 72)
        );
    }
    cylinder
    {
        type wall;
        faces
        (
            (10 5 42 47)
            (5 0 37 42)
            (16 10 47 53)
            (11 16 53 48)
            
            (32 11 48 69)
            (29 32 69 66)
            (28 29 66 65)
            ( 0 28 65 37)
        );
    }
    
    frontAndBack
    {
    	type symmetry;
    	faces
    	(
    	
    	( 5  4  9 10)
	( 0  1  4  5)
	( 1  2  3  4)
	( 4  3  6  7)
	( 9  4  7  8)
	(15 16 10  9)
	(12 11 16 15)
	(13 12 15 14)
	(14 15 18 17)
	(15  9  8 18)
	( 2 19 20  3)
	( 3 20 21  6)
	(26 28 29 30)
	( 1  0 28 26)
	(26 24  2  1)
	(27 25 24 26)
	(31 27 26 30)
	(30 29 32 33)
	(33 32 11 12)
	(35 33 12 13)
	(36 34 33 35)
	(34 31 30 33)
	(24 22 19  2)
	(25 23 22 24)
	(42 41 46 47)
	(37 38 41 42)
	(38 39 40 41)
	(41 40 43 44)
	(46 41 44 45)
	(52 53 47 46)
	(49 48 53 52)
	(50 49 52 51)
	(51 52 55 54)
	(52 46 45 55)
	(39 56 57 40)
	(40 57 58 43)
	(63 65 66 67)
	(38 37 65 63)
	(63 61 39 38)
	(64 62 61 63)
	(68 64 63 67)
	(67 66 69 70)
	(70 69 48 49)
	(72 70 49 50)
	(73 71 70 72)
	(71 68 67 70)
	(61 59 56 39)
	(62 60 59 61)

    	);
    }
);

mergePatchPairs
(
);


// ************************************************************************* //

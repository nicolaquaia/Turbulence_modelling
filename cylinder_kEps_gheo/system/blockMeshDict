/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2312                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

scale   1;

// Geometric parameters
rInner  0.5;
rOuter  1;
xmax    2.5;
ymax    2.5;
extensionLength  12.5;

zmin   -0.5;  // Back/front locations
zmax    0.5;

// Divisions: Radial, quarter circumference, outer region and z-directions.
nRadial  100;
nQuarter 28;
nxOuter  70;
nxOuter2 90;
nyOuter  20;
nxExtension  180;
nxBlock3 = 40;
nz       1;

// ----------------

// Derived quantities
rInner45    ${{ $rInner * sqrt(0.5) }};
rOuter45    ${{ $rOuter * sqrt(0.5) }};

vertices #codeStream
{
    codeInclude
    #{
        #include "pointField.H"
    #};

    code
    #{
        pointField points
        ({
            /* 0*/ { $rInner, 0, $zmin },
            /* 1*/ { $rOuter, 0, $zmin },
            /* 2*/ { $xmax, 0, $zmin },
            /* 3*/ { $xmax, $rOuter45, $zmin },
            /* 4*/ { $rOuter45, $rOuter45, $zmin },
            /* 5*/ { $rInner45, $rInner45, $zmin },
            /* 6*/ { $xmax, $ymax, $zmin },
            /* 7*/ { $rOuter45, $ymax, $zmin },
            /* 8*/ { 0, $ymax, $zmin },
            /* 9*/ { 0, $rOuter, $zmin },
            /*10*/ { 0, $rInner, $zmin },
            /*11*/ { -$rInner, 0, $zmin },
            /*12*/ { -$rOuter, 0, $zmin },
            /*13*/ { -$xmax, 0, $zmin },
            /*14*/ { -$xmax, $rOuter45, $zmin },
            /*15*/ { -$rOuter45, $rOuter45, $zmin },
            /*16*/ { -$rInner45, $rInner45, $zmin },
            /*17*/ { -$xmax, $ymax, $zmin },
            /*18*/ { -$rOuter45, $ymax, $zmin },
            
            // added vertices
            /*19*/ { $xmax + $extensionLength, 0, $zmin },
            /*20*/ { $xmax + $extensionLength, $rOuter45, $zmin },
            /*21*/ { $xmax + $extensionLength, $ymax, $zmin }
        });

        // Duplicate z points for zmax
        const label sz = points.size();
        points.resize(2*sz);
        for (label i = 0; i < sz; ++i)
        {
            const point& pt = points[i];
            points[i + sz] = point(pt.x(), pt.y(), $zmax);
        }

        os  << points;
    #};
};

// Can remove unneeded variables
#remove ( "r(Inner|Outer).*"  "[xy](min|max)" )

blocks
(
    hex (5 4 9 10 27 26 31 32)    ($nRadial  $nQuarter $nz) grading (16 1 1) // 0
    hex (0 1 4 5 22 23 26 27)     ($nRadial  $nQuarter $nz) grading (16 1 1) // 1
    hex (1 2 3 4 23 24 25 26)     ($nxOuter2  $nQuarter $nz) grading (1 1 1) // 2
    hex (4 3 6 7 26 25 28 29)     ($nxOuter2  $nyOuter  $nz) grading (1 5 1) // 3
    hex (9 4 7 8 31 26 29 30)     ($nQuarter $nyOuter  $nz) grading (1 5 1) // 4
    hex (15 16 10 9 37 38 32 31)  ($nRadial  $nQuarter $nz) grading (0.0625 1 1) // 5
    hex (12 11 16 15 34 33 38 37) ($nRadial  $nQuarter $nz) grading (0.0625 1 1) // 6
    hex (13 12 15 14 35 34 37 36) ($nxOuter  $nQuarter $nz) grading (1 1 1) // 7
    hex (14 15 18 17 36 37 40 39) ($nxOuter  $nyOuter  $nz) grading (1 5 1) // 8
    hex (15 9 8 18 37 31 30 40)   ($nQuarter $nyOuter  $nz) grading (1 5 1) // 9
    
    // added blocks (add 22 for z max)
    hex (2 19 20 3 24 41 42 25)   ($nxExtension $nQuarter  $nz) grading (5 1 1) // 10
    hex (3 20 21 6 25 42 43 28)   ($nxExtension $nyOuter  $nz) grading (5 5 1) // 11
);

edges
(

    // Inner cylinder
    arc  0  5 origin (0 0 $zmin)
    arc  5 10 origin (0 0 $zmin)
    arc  1  4 origin (0 0 $zmin)
    arc  4  9 origin (0 0 $zmin)
    arc 22 27 origin (0 0 $zmax)
    arc 27 32 origin (0 0 $zmax)
    arc 23 26 origin (0 0 $zmax)
    arc 26 31 origin (0 0 $zmax)
    // Intermediate cylinder
    arc 11 16 origin (0 0 $zmin)
    arc 16 10 origin (0 0 $zmin)
    arc 12 15 origin (0 0 $zmin)
    arc 15  9 origin (0 0 $zmin)
    arc 33 38 origin (0 0 $zmax)
    arc 38 32 origin (0 0 $zmax)
    arc 34 37 origin (0 0 $zmax)
    arc 37 31 origin (0 0 $zmax)
);

boundary
(
    down
    {
        //type symmetryPlane; original
        type patch;
        faces
        (
            (0 1 23 22)
            (1 2 24 23)
            (12 11 33 34)
            (13 12 34 35)
            
            // added face
            (2 19 41 24)
            
        );
    }
    right
    {
        type patch;
        faces
        (
            (19 20 42 41)
            (20 21 43 42)
        );
    }
    up
    {
        type symmetry;
        faces
        (

            (7 8 30 29)
            (6 7 29 28)
            (21 6 28 43)
            (8 18 40 30)
            (18 17 39 40)

        );
    }
    left
    {
        type patch;
        faces
        (
            (14 13 35 36)
            (17 14 36 39)
        );
    }
    cylinder
    {
        type wall;
        faces
        (
            (10 5 27 32)
            (5 0 22 27)
            (16 10 32 38)
            (11 16 38 33)
        );
    }
);

mergePatchPairs
(
);


// ************************************************************************* //
